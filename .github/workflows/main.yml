name: gihub_action
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: appecr
  ECS_SERVICE: GitHub_Action_Project_Service
  ECS_CLUSTER: GitHub_Action_Project_Cluster
  ECS_TASK_DEFINITION: aws-files/taskdeffile.json
  CONTAINER_NAME: projectapp
jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v4

      - name: Test maven
        run: mvn test

      - name: checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: setup Sonarqube
        uses: warchant/setup-sonar-scanner@v7
        # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath-target/surefire-reports/
           -Dsonar.jacoco.reportsPath=target/jacoco.exec
           -Dsonar.java.checkstyle.reportPaths-target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account
  BUILD_AND_PUBLISH:
    needs: testing
    runs-on: ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v4

      - name: Update application.properties file
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\-${{ secrets. RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets. RDS_PASS }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets. RDS_ENDPOINT }}/" src/main/resources/application.properties

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{env.ECR_REPOSITORY}}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  Deploy:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets. REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ECS_SERVICE
          cluster: ECS_CLUSTER
          wait-for-service-stability: true